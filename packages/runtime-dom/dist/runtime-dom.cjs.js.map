{"version":3,"file":"runtime-dom.cjs.js","sources":["../../shared/src/index.ts","../../runtime-core/src/createVNode.ts","../../runtime-core/src/h.ts","../../reactivity/src/effect.ts","../../reactivity/src/reactive.ts","../../reactivity/src/computed.ts","../../reactivity/src/ref.ts","../../runtime-core/src/apiCreateApp.ts","../../runtime-core/src/component.ts","../../runtime-core/src/rendener.ts","../src/nodeOps.ts","../src/patchProp.ts","../src/index.ts"],"sourcesContent":["/*\n * @Description: \n * @Author: changqing\n * @Date: 2021-12-15 17:55:45\n * @LastEditTime: 2021-12-20 10:57:00\n * @LastEditors: changqing\n * @Usage: \n */\nexport function isObject(value: unknown): boolean {\n  return typeof value === 'object' && value !== null\n}\nexport function isFunction(value):boolean{\n  return typeof value === 'function'\n}\n\nexport function isString(value) {\n  return typeof value === 'string'\n}\n\nexport const enum ShapeFlags {\n  ELEMENT = 1, // 元素\n  FUNCTIONAL_COMPONENT = 1 << 1, // 函数式组件\n  STATEFUL_COMPONENT = 1 << 2, // 普通组件\n  TEXT_CHILDREN = 1 << 3, // 孩子是文本\n  ARRAY_CHILDREN = 1 << 4, // 孩子是数组\n  SLOTS_CHILDREN = 1 << 5, // 组件插槽\n  TELEPORT = 1 << 6, // teleport组件\n  SUSPENSE = 1 << 7, // suspense组件\n  COMPONENT = ShapeFlags.STATEFUL_COMPONENT | ShapeFlags.FUNCTIONAL_COMPONENT \t// 组件\n}\nconst hasOwnProperty = Object.prototype.hasOwnProperty\nexport const hasOwn = (value,key) => hasOwnProperty.call(value,key);\n/*\nlet r = ShapeFlags.ELEMENT | ShapeFlags.FUNCTIONAL_COMPONENT; // r包含元素和函数式组件\n// 我们像看r 是不是元素\n(r & ShapeFlags.ELEMENT) > 0; // 说明包含元素\n(r & ShapeFlags.FUNCTIONAL_COMPONENT) > 0\n*/\n\n\n  // 二进制  00000100  位移  | & 是做权限必备的一个操作 \n  // | 来组合权限 & 来判断是否包含某个权限\n  //   001 |  010 => 011  =3    011 & 001 = 001   011 & 010 => 010   011 & 100  -> 000\n  // 001\n  // 010\n  // 100","/*\n * @Description: \n * @Author: changqing\n * @Date: 2021-12-18 22:17:44\n * @LastEditTime: 2021-12-20 11:11:02\n * @LastEditors: changqing\n * @Usage: \n */\nimport { isObject, isString, ShapeFlags } from \"@vue/shared\";\nexport function createVNode(type, props, children = null) { // h('div',{},['helloworld','helloworld'])\n    // 虚拟节点就是 用一个对象来描述信息的  \n\n    // & | \n    const shapeFlag = isObject(type) ?\n        ShapeFlags.COMPONENT :\n        isString(type) ?\n            ShapeFlags.ELEMENT :\n            0\n\n    const vnode = { // 跨平台\n        __v_isVNode: true,\n        type,\n        shapeFlag,\n        props,\n        children,\n        key: props && props.key, // key值\n        component: null, // 如果是组件的虚拟节点要保存组件的实例\n        el: null, // 虚拟节点对应的真实节点\n    }\n    if(children){\n      \n        // 告诉此节点 是什么样的儿子 \n        // 稍后渲染虚拟节点的时候 可以判断儿子是数组 就循环渲染\n        vnode.shapeFlag =  vnode.shapeFlag | (isString(children) ? ShapeFlags.TEXT_CHILDREN:ShapeFlags.ARRAY_CHILDREN)\n    }\n    // vnode 就可以描述出来 当前他是一个什么样的节点 儿子是什么样的\n    return vnode; // createApp(App)\n}\n\nexport function isVNode(vnode){\n    return !!vnode.__v_isVNode\n}\n\nexport const Text = Symbol();\nexport function normalizeVNode(vnode){\n    if(isObject(vnode)){\n        return vnode;\n    }\n    return createVNode(Text,null,String(vnode));\n}\n\nexport function isSameVNodeType(n1,n2){\n    // 比较类型是否一致 比较key是否一致\n    return n1.type === n2.type && n1.key === n2.key;\n}","/*\n * @Description: \n * @Author: changqing\n * @Date: 2021-12-20 11:16:18\n * @LastEditTime: 2021-12-20 11:16:19\n * @LastEditors: changqing\n * @Usage: \n */\nimport { isObject } from \"@vue/shared\";\nimport { isVNode, createVNode } from \"./createVNode\";\n\nexport function h(type, propsOrChildren, children) {\n    // 写法1.  h('div',{color:red})\n    // 写法2.  h('div',h('span'))\n    // 写法3   h('div','hello')\n    // 写法4：  h('div',['hello','hello'])\n    let l = arguments.length;\n    if (l === 2) {\n        if (isObject(propsOrChildren) && !Array.isArray(propsOrChildren)) {\n            if (isVNode(propsOrChildren)) {\n                return createVNode(type, null, [propsOrChildren])//  h('div',h('span'))\n            }\n            return createVNode(type, propsOrChildren);  //  h('div',{color:red})\n        } else {\n            return createVNode(type, null, propsOrChildren); // h('div','hello')   h('div',['hello','hello'])\n        }\n    } else {\n        if (l > 3) {\n            children = Array.prototype.slice.call(arguments, 2);\n        } else if (l === 3 && isVNode(children)) {\n            children = [children]\n        }\n        return createVNode(type, propsOrChildren, children);\n    }\n    // h('div',{},'孩子')\n    // h('div',{},['孩子','孩子','孩子'])\n    // h('div',{},[h('span'),h('span'),h('span')])\n}","/*\n * @Description: \n * @Author: changqing\n * @Date: 2021-12-18 15:34:57\n * @LastEditTime: 2021-12-18 16:09:05\n * @LastEditors: changqing\n * @Usage: \n */\n\n// effect1(()=>{\n//     state.name\n//     effect2(()=>{\n//         state.age;\n//     })\n//     state.address\n// })\n// effectStack = [effect1] activeEffect = effect1\n// effect1 -> name\n// effectStack = [effect1，effect2] activeEffect = effect2\n// effect2 -> age\n// effectStack = [effect1] activeEffect = effect1\n// effect1 -> address\n\n\nlet effectStack = []; // 目的就是为了能保证我们effect执行的时候 可以存储正确的关系\nlet activeEffect;\n\n\nfunction cleanupEffect(effect) {\n  const { deps } = effect;\n  for (let dep of deps) {\n      // set 删除effect 让属性 删除掉对应的effect   name = []\n      dep.delete(effect); // 让属性对应的effect移除掉，这样属性更新的时候 就不会触发这个effect重新执行了\n  }\n}\n\n// 属性变化 触发的是 dep -> effect\n// effect.deps = [] 和属性是没关系的\nexport class ReactiveEffect {\n  active = true; // this.active = true;\n  deps = []; // 让effect 记录他依赖了哪些属性 ， 同时要记录当前属性依赖了哪个effect\n  constructor(public fn, public scheduler?) { // this.fn = fn;\n\n  }\n  run() { // 调用run的时候会让fn执行\n      if (!this.active) { // 稍后如果非激活状态 调用run方法 默认会执行fn函数\n          return this.fn();\n      }\n      if (!effectStack.includes(this)) { // 屏蔽同一个effect会多次执行\n          try {\n              effectStack.push(activeEffect = this);\n              return this.fn(); // 取值  new Proxy 会执行get方法  (依赖收集)\n          } finally {\n              effectStack.pop(); // 删除最后一个\n              activeEffect = effectStack[effectStack.length - 1]\n          }\n      }\n  }\n  stop() { // 让effect 和 dep 取消关联 dep上面存储的effect移除掉即可\n      if (this.active) {\n          cleanupEffect(this)\n          this.active = false;\n      }\n  }\n}\n// obj name :[effect]\n//     age : [effect]\n// {对象：{属性 ： [effect,effect]}  } \nexport function isTracking() {\n  return activeEffect !== undefined\n}\n\nconst targetMap = new WeakMap();\nexport function track(target, key) { // 一个属性对应多个effect， 一个effect中依赖了多个属性 =》 多对多\n  // 是只要取值我就要收集吗？不是\n  if (!isTracking()) { // 如果这个属性 不依赖于effect直接跳出即可\n      return\n  }\n  let depsMap = targetMap.get(target);\n  if (!depsMap) {\n      targetMap.set(target, (depsMap = new Map())); // {对象：map{}}\n  }\n  let dep = depsMap.get(key);\n  if (!dep) {\n      depsMap.set(key, (dep = new Set()));// {对象：map{name:set[]}}\n  }\n  trackEffects(dep);\n}\nexport function trackEffects(dep) {\n  let shouldTrack = !dep.has(activeEffect); // 看一下这个属性有没有存过这个effect\n  if (shouldTrack) {\n      dep.add(activeEffect); // // {对象：map{name:set[effect,effect]}}\n      activeEffect.deps.push(dep); // 稍后用到\n  } // { 对象：{name:set,age:set}\n\n}\nexport function trigger(target, key) {\n  let depsMap = targetMap.get(target);\n  if (!depsMap) return;// 属性修改的属性 根本没有依赖任何的effect\n  let deps = []; // [set ,set ]\n  if (key !== undefined) {\n      deps.push(depsMap.get(key));\n  }\n  let effects = [];\n  for (const dep of deps) {\n      effects.push(...dep)\n  }\n  triggerEffects(effects);\n}\nexport function triggerEffects(dep) {\n  for (const effect of dep) { // 如果当前effect执行 和 要执行的effect是同一个，不要执行了 防止循环\n      if (effect !== activeEffect) {\n          if (effect.scheduler) {\n              return effect.scheduler()\n          }\n          effect.run(); // 执行effect\n      }\n  }\n}\nexport function effect(fn) {\n  const _effect = new ReactiveEffect(fn);\n  _effect.run(); // 会默认让fn执行一次\n  let runner = _effect.run.bind(_effect);\n  runner.effect = _effect; // 给runner添加一个effect实现 就是 effect实例\n  return runner;\n}\n// vue3 的响应式原理  取值时 收集对应的effect， 改值时找到对应的effect执行","/*\n * @Description: \n * @Author: changqing\n * @Date: 2021-12-17 11:07:14\n * @LastEditTime: 2021-12-18 16:16:05\n * @LastEditors: changqing\n * @Usage: \n */\nimport { isObject } from \"@vue/shared\";\nimport { track, trigger } from \"./effect\";\n\nconst enum ReactiveFlags{\n  IS_REACTIVE = '__v_isReactive'\n}\n\nconst mutableHandlers: ProxyHandler<Record<any, any>> = {\n  get(target, key, recevier) { // 代理对象的本身\n      if (key === ReactiveFlags.IS_REACTIVE) {\n          return true;\n      }\n      // 这里取值了， 可以收集他在哪个effect中\n      track(target,key);\n      const res = Reflect.get(target, key, recevier); // target[key]\n      return res;\n  },\n  set(target, key, value, recevier) {\n      let oldValue = (target as any)[key]\n      const res = Reflect.set(target, key, value, recevier); // target[key] = value\n       // 如果改变值了， 可以在这里触发effect更新\n      if(oldValue !== value){ // 值不发生变化 effect不需要重新执行\n        trigger(target,key); // 找属性对应的effect让她重新执行\n      }\n      return res;\n  }\n}\n// map和weakMap的区别\nconst reactiveMap = new WeakMap(); // weakmap 弱引用   key必须是对象，如果key没有被引用可以被自动销毁\n\nfunction createReactiveObject(target: object) { \n  // 先默认认为这个target已经是代理过的属性了\n  if ((target as any)[ReactiveFlags.IS_REACTIVE]) {\n      return target\n  }\n  // reactiveApi 只针对对象才可以 \n  if (!isObject(target)) {\n      return target\n  }\n  const exisitingProxy = reactiveMap.get(target); // 如果缓存中有 直接使用上次代理的结果\n  if (exisitingProxy) {\n      return exisitingProxy\n  }\n  const proxy = new Proxy(target, mutableHandlers); // 当用户获取属性 或者更改属性的时候 我能劫持到\n  reactiveMap.set(target, proxy); // 将原对象和生成的代理对象 做一个映射表\n\n  return proxy; // 返回代理\n}\n\nexport function reactive(target: object) {\n  return createReactiveObject(target)\n}\nexport function toReactive(value){\n  return isObject(value) ? reactive(value) : value\n}\n// readonly shallowReactive shallowReadnly \n// export function readonly(){\n// }\n// export function shallowReactive(){\n// }\n// export function shallowReadnly(){\n// }\n","/*\n * @Description: \n * @Author: changqing\n * @Date: 2021-12-18 16:19:54\n * @LastEditTime: 2021-12-18 16:19:54\n * @LastEditors: changqing\n * @Usage: \n */\nimport { isFunction } from \"@vue/shared\";\nimport { isTracking, ReactiveEffect, trackEffects, triggerEffects } from \"./effect\";\n\n\nclass ComputedRefImpl {\n    public dep; // this.dep = undefined;\n    public _dirty = true; // this._dirty = true;\n    public __v_isRef = true;\n    public effect; // 计算属性是依赖于effect的\n    public _value;\n    constructor(getter, public setter) { // 只有调用computed()才执行一次\n        // 这里将计算属性包成一个effect\n        // 这里 我给计算属性变成了effect ，那么计算属性中的属性会收集这个effect\n        this.effect = new ReactiveEffect(getter,()=>{\n            // 稍后计算属性依赖的值变化 不要重新执行计算属性的effect，而是调用此函数\n            if(!this._dirty){\n                this._dirty = true;\n                triggerEffects(this.dep )\n            }\n        });\n    }\n    get value() { // 取值时会走get方法\n        if (isTracking()) { // 是否是在effect中取值的\n            trackEffects(this.dep || (this.dep = new Set))\n        }\n        if (this._dirty) {\n            // 将结果缓存到this._value 这样就不用每次都run了\n            this._value = this.effect.run();\n            this._dirty = false;\n        }\n        return this._value;\n    }\n    set value(newValue) {\n        this.setter(newValue); // 如果修改计算属性的值 就触发你自己的set方法\n    }\n}\nexport function computed(getterOrOptions) {\n    const onlyGetter = isFunction(getterOrOptions);\n    let getter;\n    let setter;\n    if (onlyGetter) {\n        getter = getterOrOptions;\n        setter = () => { }\n    } else {\n        getter = getterOrOptions.get;\n        setter = getterOrOptions.set;\n    }\n\n    return new ComputedRefImpl(getter, setter)\n}","/*\n * @Description: \n * @Author: changqing\n * @Date: 2021-12-18 16:43:46\n * @LastEditTime: 2021-12-18 16:48:58\n * @LastEditors: changqing\n * @Usage: \n */\nimport { isTracking, trackEffects, triggerEffects } from \"./effect\";\nimport { toReactive } from \"./reactive\";\n\nclass RefImpl{\n    public dep;\n    public __v_isRef;\n    public _value;\n    constructor(public _rawValue){ // 原来的值\n        // _rawValue如果用户传进来的值 是一个对象 我需要将对象转化成响应式\n        this._value = toReactive(_rawValue)\n    }\n\n  \n    // 类的属性访问器 最终会变成deifneProperty\n    get value(){ // 取值的时候进行依赖收集\n        if(isTracking()){\n            trackEffects(this.dep || (this.dep = new Set()));\n        }\n        return this._value;\n    }\n    set value(newValue){ // 设置的时候触发更新\n        if(newValue !== this._rawValue){\n            // 先看一下之前之后是否一样\n            this._rawValue = newValue;\n            this._value =  toReactive(newValue);\n            triggerEffects(this.dep);\n        }\n    }\n}\n\nfunction createRef(value){\n\n    return new RefImpl(value);\n}\n\n\nexport function ref(value){\n    return createRef(value);\n}\n\n// export function shallowRef(value){\n //   return createRef(value,true);\n// }\n\n// reactive readonly ","/*\n * @Description: \n * @Author: changqing\n * @Date: 2021-12-18 22:14:02\n * @LastEditTime: 2021-12-20 14:27:33\n * @LastEditors: changqing\n * @Usage: \n */\nimport { createVNode } from \"./createVNode\";\n\nexport function createAppAPI(render) {\n    return (rootComponent, rootProps) => {\n        let isMounted = false;\n        const app = {\n            mount(container) {\n                // 1.创造组件虚拟节点 \n                let vnode = createVNode(rootComponent, rootProps); // h函数\n                // 2.挂载的核心就是根据传入的组件对象 创造一个组件的虚拟节点 ，在将这个虚拟节点渲染到容器中\n                render(vnode, container)\n                if (!isMounted) {\n                    isMounted = true;\n                }\n            }\n        }\n        return app\n    }\n}\n","/*\n * @Description: \n * @Author: changqing\n * @Date: 2021-12-20 11:15:53\n * @LastEditTime: 2021-12-20 11:15:53\n * @LastEditors: changqing\n * @Usage: \n */\nimport { reactive } from '@vue/reactivity';\nimport { hasOwn, isFunction, isObject } from '@vue/shared';\nexport function createComponentInstance(vnode){\n    const type = vnode.type; // 用户自己传入的属性\n    const instance = {\n        vnode, // 实例对应的虚拟节点\n        type, // 组件对象\n        subTree: null, // 组件渲染的内容   vue3中组件的vnode 就叫vnode  组件渲染的结果 subTree\n        ctx: {}, // 组件上下文\n        props: {}, // 组件属性\n        attrs: {}, // 除了props中的属性 \n        slots: {}, // 组件的插槽\n        setupState: {}, // setup返回的状态\n        propsOptions: type.props, // 属性选项\n        proxy: null, // 实例的代理对象\n        render:null, // 组件的渲染函数\n        emit: null, // 事件触发\n        exposed:{}, // 暴露的方法\n        isMounted: false // 是否挂载完成\n    }\n    instance.ctx = {_:instance}; // 稍后会说 ， 后续会对他进行代理\n    return instance;\n}\nexport function initProps(instance,rawProps){\n    const props = {};\n    const attrs = {};\n    const options = Object.keys(instance.propsOptions); // 用户注册过的, 校验类型\n    if(rawProps){\n        for(let key in rawProps){\n            const value = rawProps[key];\n            if(options.includes(key)){\n                props[key] = value;\n            }else{\n                attrs[key] = value\n            }\n        }\n    }\n    instance.props = reactive(props);\n    instance.attrs = attrs; // 这个attrs 是非响应式的\n}\n\nfunction createSetupContext(instance){\n    return {\n        attrs:instance.attrs,\n        slots:instance.slots,\n        emit:instance.emit,\n        expose:(exposed) =>instance.exposed = exposed || {}\n    }\n}\nconst PublicInstanceProxyHandlers = {\n    get({_:instance},key){\n        const {setupState,props} = instance;  // 同名 props 和状态同名   通过proxy 可以直接访问状态和属性\n        if(hasOwn(setupState,key)){\n            return setupState[key];\n        }else if(hasOwn(props,key)){\n            return props[key];\n        }else{\n            // ....\n        }\n    },\n    set({_:instance},key,value){\n        const {setupState,props} = instance; // 属性不能修改\n        if(hasOwn(setupState,key)){\n             setupState[key] = value;\n        }else if(hasOwn(props,key)){\n            console.warn('Props are readonly')\n            return false;\n        }else{\n            // ....\n        }\n        return true\n    }\n}\nexport function setupStatefulComponent(instance){\n    // 核心就是调用组件的setup方法\n    const Component = instance.type;\n    const {setup} = Component;\n    instance.proxy = new Proxy(instance.ctx,PublicInstanceProxyHandlers); // proxy就是代理的上下文\n    if(setup){\n        const setupContext = createSetupContext(instance);\n        let setupResult = setup(instance.props,setupContext); /// 获取setup的返回值\n        if(isFunction(setupResult)){\n            instance.render = setupResult; // 如果setup返回的是函数那么就是render函数\n        }else if(isObject(setupResult)){\n            instance.setupState = setupResult;\n        }\n    }\n    if(!instance.render){\n        // 如果 没有render 而写的是template  可能要做模板编译  下个阶段 会实现如何将template -》 render函数 (耗性能)\n        instance.render = Component.render; // 如果setup没有写render 那么就采用组件本身的render\n    }\n}\n\nexport function setupComponent(instance){\n    const  {props,children} = instance.vnode;\n    // 组件的props 做初始化  attrs也要初始化\n    initProps(instance,props)\n    // 插槽的初始化\n    // initSlots(instance,children) ...\n    setupStatefulComponent(instance); // 这个方法的目的就是调用setup函数 拿到返回值 给\n\n}","/*\n * @Description: \n * @Author: changqing\n * @Date: 2021-12-20 11:06:00\n * @LastEditTime: 2021-12-27 20:42:27\n * @LastEditors: changqing\n * @Usage: \n */\n\n// runtime-core  根平台无关的运行时  \n\nimport { ShapeFlags } from '@vue/shared'\nimport { ReactiveEffect } from '@vue/reactivity';\nimport { createAppAPI } from './apiCreateApp'\nimport { createComponentInstance, setupComponent } from './component';\nimport { isSameVNodeType, normalizeVNode, Text } from './createVNode';\n\nfunction getSequence(arr) {\n    let len = arr.length;\n    const result = [0]; // 这里放的是索引\n    let p = arr.slice(0); // 用来记录前驱节点的索引， 用来追溯正确的顺序\n    let lastIndex;\n    let start;\n    let end;\n    let middle;\n    // 1.直接看元素 如果比当前的末尾大直接追加即可  ok 1\n    for (let i = 0; i < len; i++) {\n        const arrI = arr[i]; // 存的每一项的值\n        if (arrI !== 0) {\n            lastIndex = result[result.length - 1]; // 获取结果集中的最后一个\n            if (arr[lastIndex] < arrI) { // 当前结果集中的最后一个 和这一项比较\n\n                // 记录当前前一个人索引\n                p[i] = lastIndex;\n                result.push(i);\n                continue\n            }\n            // 二分查找 替换元素 \n            start = 0;\n            end = result.length - 1;\n            while (start < end) { // start = end    0  3 = 1.5  二分查找\n                middle = ((start + end) / 2) | 0; // 中间的索引 \n                // 找到序列中间的索引， 通过索引找到对应的值\n                if (arr[result[middle]] < arrI) {\n                    start = middle + 1;\n                } else {\n                    end = middle;\n                }\n            }\n            if (arrI < arr[result[start]]) { // 要替换成 5的索引\n\n                // 这里在替换之前 应该让当前元素\n                p[i] = result[start - 1]; // 用找到的索引 标记到p上\n\n                result[start] = i;\n            } // 找到更有潜力 替换之前的 （贪心算法 ）\n        }\n    }\n    let i = result.length; // 拿到最后一个 开始向前追溯\n    let last = result[i - 1]; // 取出最后一个\n\n    while (i-- > 0) { // 通过前驱节点找到正确的调用顺序\n        result[i] = last; // 最后一项肯定是正确的\n        last = p[last]; // 通过最后一项 向前查找\n    }\n    return result;\n    // [0,1,2,3]   [2,3,8,9]  // 用5找到  递增的序列为了快速查找我们可以采用二分查找的方式进行查找  O（n）  O(logn)\n}\nexport function createRenderer(renderOptions) { // runtime-core   renderOptionsDOMAPI -> rootComponent -> rootProps -> container\n    const {\n        insert: hostInsert,\n        remove: hostRemove,\n        patchProp: hostPatchProp,\n        createElement: hostCreateElement,\n        createText: hostCreateText,\n        createComment: hostCreateComment,\n        setText: hostSetText,\n        setElementText: hostSetElementText,\n        parentNode: hostParentNode,\n        nextSibling: hostNextSibling,\n    } = renderOptions;\n\n\n    const setupRenderEffect = (initialVNode, instance, container) => {\n        // 创建渲染effect\n\n        // 核心就是调用render，数据变化 就重新调用render \n        const componentUpdateFn = () => {\n            let { proxy } = instance; //  render中的参数\n            if (!instance.isMounted) {\n                // 组件初始化的流程\n                // 调用render方法 （渲染页面的时候会进行取值操作，那么取值的时候会进行依赖收集 ， 收集对应的effect，稍后属性变化了会重新执行当前方法）\n                const subTree = instance.subTree = instance.render.call(proxy, proxy); // 渲染的时候会调用h方法\n\n                // 真正渲染组件 其实渲染的应该是subTree\n\n                patch(null, subTree, container); // 稍后渲染完subTree 会生成真实节点之后挂载到subTree\n                initialVNode.el = subTree.el\n                instance.isMounted = true;\n            } else {\n                // 组件更新的流程 。。。\n                // 我可以做 diff算法   比较前后的两颗树 \n\n                const prevTree = instance.subTree;\n                const nextTree = instance.render.call(proxy, proxy);\n                patch(prevTree, nextTree, container); // 比较两棵树\n            }\n        }\n        const effect = new ReactiveEffect(componentUpdateFn);\n        // 默认调用update方法 就会执行componentUpdateFn\n        const update = effect.run.bind(effect);\n        update();\n    }\n\n    const mountComponent = (initialVNode, container) => { // 组件的挂载流程\n        // 根据组件的虚拟节点 创造一个真实节点 ， 渲染到容器中\n        // 1.我们要给组件创造一个组件的实例 \n        const instance = initialVNode.component = createComponentInstance(initialVNode);\n        // 2. 需要给组件的实例进行赋值操作\n        setupComponent(instance); // 给实例赋予属性\n\n        // 3.调用render方法实现 组件的渲染逻辑。 如果依赖的状态发生变化 组件要重新渲染\n        // 数据和视图是双向绑定的 如果数据变化视图要更新 响应式原理 \n        // effect  data  effect 可以用在组件中，这样数据变化后可以自动重新的执行effect函数\n        setupRenderEffect(initialVNode, instance, container); // 渲染effect\n\n    }\n    const processComponent = (n1, n2, container) => {\n        if (n1 == null) {\n            // 组件的初始化\n            mountComponent(n2, container);\n        } else {\n            // 组件的更新\n        }\n    }\n\n    const mountChildren = (children, container) => {\n        // 如果是一个文本 可以直接   el.textContnt = 文本2\n        // ['文本1','文本2']   两个文本 需要 创建两个文本节点 塞入到我们的元素中\n\n        for (let i = 0; i < children.length; i++) {\n            const child = (children[i] = normalizeVNode(children[i]));\n            patch(null, child, container); // 如果是文本需要特殊处理\n        }\n    }\n\n    const mountElement = (vnode, container,anchor) => {\n        // vnode中的children  可能是字符串 或者是数组  对象数组  字符串数组\n\n        let { type, props, shapeFlag, children } = vnode; // 获取节点的类型 属性 儿子的形状 children\n\n        let el = vnode.el = hostCreateElement(type)\n\n        if (shapeFlag & ShapeFlags.TEXT_CHILDREN) {\n            hostSetElementText(el, children)\n        } else if (shapeFlag & ShapeFlags.ARRAY_CHILDREN) {  // 按位与\n            mountChildren(children, el);\n        }\n        // 处理属性\n        if (props) {\n            for (const key in props) {\n                hostPatchProp(el, key, null, props[key]); // 给元素添加属性\n            }\n        }\n        hostInsert(el, container,anchor);\n    }\n    const patchProps = (oldProps, newProps, el) => {\n        if (oldProps === newProps) return;\n\n        for (let key in newProps) {\n            const prev = oldProps[key];\n            const next = newProps[key]; // 获取新老属性\n            if (prev !== next) {\n                hostPatchProp(el, key, prev, next);\n            }\n        }\n        for (const key in oldProps) { // 老的有新的没有  移除老的\n            if (!(key in newProps)) {\n                hostPatchProp(el, key, oldProps[key], null);\n            }\n        }\n\n    }\n    const unmountChildren = (children) => {\n        for (let i = 0; i < children.length; i++) {\n            unmount(children[i])\n        }\n    }\n    const patchKeyedChildren = (c1, c2, container) => {\n        let e1 = c1.length - 1;\n        let e2 = c2.length - 1;\n        let i = 0; // 从头开始比较\n\n        // 1.sync from start 从头开始一个个孩子来比较 , 遇到不同的节点就停止了\n        while (i <= e1 && i <= e2) { // 如果i 和 新的列表或者老的列表指针重合说明就比较完毕了\n            const n1 = c1[i];\n            const n2 = c2[i];\n\n            if (isSameVNodeType(n1, n2)) { // 如果两个节点是相同节点 则需要递归比较孩子和自身的属性\n                patch(n1, n2, container)\n            } else {\n                break;\n            }\n            i++;\n        }\n        // sync from end\n        while (i <= e1 && i <= e2) { // 如果i 和 新的列表或者老的列表指针重合说明就比较完毕了\n            const n1 = c1[e1];\n            const n2 = c2[e2];\n            if (isSameVNodeType(n1, n2)) { // 如果两个节点是相同节点 则需要递归比较孩子和自身的属性\n                patch(n1, n2, container)\n            } else {\n                break;\n            }\n            e1--;\n            e2--\n        }\n        console.log(i, e1, e2); // 确定好了 头部 和 尾部相同的节点 定位到除了头部和尾部的节点\n\n        // 3.common sequence + mount\n\n        if (i > e1) { // 看i和e1 之间的关系 如果i 大于 e1  说明有新增的元素\n            if (i <= e2) {  // i和 e2 之间的内容就是新增的\n\n                const nextPos = e2 + 1;\n                // 取e2 的下一个元素 如果下一个没有 则长度和当前c2长度相同  说明追加\n                // 取e2 的下一个元素 如果下一个有 说明要在头部追加 则取出下一个节点作为参照物\n                const anchor = nextPos < c2.length ? c2[nextPos].el : null;\n\n                // 参照物的目的 要计算是向前插入还是向后插入\n                while (i <= e2) {\n                    patch(null, c2[i], container, anchor); // 没有参照物 就是appendChild\n                    i++;\n                }\n            }\n\n            // 4.common sequence + unmount\n        } else if (i > e2) {   // 看一下 i 和 e2 的关系 如果 e2 比i小 说明 老的多新的少\n            while (i <= e1) {\n                // i 和 e1 之间的就是要删除的\n                unmount(c1[i]);\n                i++;\n            }\n        }\n\n        // unknown sequence\n        const s1 = i;  // s1 -> e1 老的孩子列表\n        const s2 = i;  // s2 -> e2  新的孩子列表\n\n        // 根据新的节点 创造一个映射表 ， 用老的列表去里面找有没有，如果有则复用，没有就删除。 最后新的多余在追加\n\n        const keyToNewIndexMap = new Map(); // 这个目的是为了可以用老的来查看有没有新的\n        for (let i = s2; i <= e2; i++) {\n            const child = c2[i];\n            keyToNewIndexMap.set(child.key, i)\n        }\n\n        const toBepatched = e2 - s2 + 1; // 4\n        const newIndexToOldMapIndex = new Array(toBepatched).fill(0); // 最长递增子序列会用到这个列表  5 3 4 0\n\n\n\n\n        // 拿老的去新的中查找\n\n        // 找到一样的需要patch\n        for (let i = s1; i <= e1; i++) { // 新的索引映射到老的索引的映射表\n            const prevChild = c1[i]; // 拿到老的每一个节点\n            let newIndex = keyToNewIndexMap.get(prevChild.key);\n            if (newIndex == undefined) { // 删掉老的多余的\n                unmount(prevChild)\n            } else {\n                newIndexToOldMapIndex[newIndex - s2] = i + 1;// 保证填的肯定不是0 , 0意味着添加了一个元素\n\n                // 比较两个人的节点 \n                patch(prevChild, c2[newIndex], container); // 填表后 还要比对属性和儿子\n            }\n        }\n\n        // 在去移动需要移动的元素\n        let queue = getSequence(newIndexToOldMapIndex); // 求出队列   [1,2]  1 ,2 不用动\n\n        let j = queue.length - 1; // 拿到最长递增子序列的末尾索引\n        for (let i = toBepatched - 1; i >= 0; i--) {\n            let lastIndex = s2 + i; // h的索引\n            let lastChild = c2[lastIndex];\n            let anchor = lastIndex + 1 < c2.length ? c2[lastIndex + 1].el : null\n\n            if (newIndexToOldMapIndex[i] == 0) { // 等于0的时候还没有真实节点，需要创建真实节点在插入\n                patch(null, lastChild, container, anchor); // 创建一个h 插入到 f的前面\n            } else {\n                // 这里可以进行优化 问题出在可能有一些节点不需要移动，但是还是全部插入了一遍\n                // 性能消耗， 最长递增子序列 减少dom的插入操作 \n                if (i !== queue[j]) {\n                    // 3 2 1 0  倒叙插入 所以  i的值 就是  3 2 1 0\n                    hostInsert(lastChild.el, container, anchor); // 将列表倒序的插入\n                }else{\n                    j--; // 这里做了一个优化 表示元素不需要移动了\n                }\n            }\n        }\n    }\n\n    const patchChildren = (n1, n2, el) => {\n        const c1 = n1 && n1.children;\n        const c2 = n2 && n2.children;\n        const prevShapeFlag = n1.shapeFlag;\n        const shapeFlag = n2.shapeFlag\n        // c1 和 c2 儿子有哪些类型 \n        // 1.之前是数组 ， 现在是文本   删除老的节点 ，用新的文本替换掉\n        // 2.之前是数组 ， 现在也是数组  比较两个儿子列表的差异  （* diff算法）\n        // 3.之前是文本， 现在是是空   直接删除老的即可\n\n        // 4.之前是文本  现在也是文本 直接更新文本\n        // 5.之前是文本 现在是数组  删除文本 新增儿子\n        // 6之前是空  现在是文本 \n        if (shapeFlag & ShapeFlags.TEXT_CHILDREN) {\n            if (prevShapeFlag & ShapeFlags.ARRAY_CHILDREN) {\n                unmountChildren(c1); // 1.\n            }\n            if (c1 !== c2) { // 4.\n                hostSetElementText(el, c2);\n            }\n        } else {\n            // 现在是数组 \n            if (prevShapeFlag & ShapeFlags.ARRAY_CHILDREN) {\n                if (shapeFlag & ShapeFlags.ARRAY_CHILDREN) {\n                    patchKeyedChildren(c1, c2, el);\n                } else {\n                    // 之前是数组  空文本\n                    unmountChildren(c1);\n                }\n            } else {\n                // 之前是文本\n                if (prevShapeFlag & ShapeFlags.TEXT_CHILDREN) {\n                    hostSetElementText(el, '');\n                }\n                if (shapeFlag & ShapeFlags.ARRAY_CHILDREN) {\n                    mountChildren(c2, el);\n                }\n            }\n        }\n    }\n    const patchElement = (n1, n2) => {\n        let el = n2.el = n1.el; // 先比较元素 元素一致 则复用 \n        const oldProps = n1.props || {}; // 复用后比较属性\n        const newProps = n2.props || {};\n        patchProps(oldProps, newProps, el);\n\n         // 实现比较儿子  diff算法   我们的diff算法是同级别比较的\n\n         patchChildren(n1, n2, el); // 用新的儿子n2 和 老的儿子n1 来进行比对  比对后更新容器元素  \n\n    }\n    const processElement = (n1, n2, container,anchor) => { // 组件对应的返回值的初始化\n        if (n1 == null) {\n            // 初始化\n            mountElement(n2, container,anchor);\n        } else {\n            // diff\n            patchElement(n1, n2); // 更新两个元素之间的差异\n        }\n\n    }\n    const processText = (n1, n2, container) => {\n        if (n1 === null) {\n            // 文本的初始化 \n            let textNode = hostCreateText(n2.children);\n            n2.el = textNode; // 要让虚拟节点和真实节点挂载上\n            hostInsert(textNode, container)\n        }\n    }\n    const unmount = (vnode) => {\n        hostRemove(vnode.el); // 删除真实节点即可\n    }\n    const patch = (n1, n2, container,anchor = null) => {\n        // 两个元素 完全没用关系 \n        if (n1 && !isSameVNodeType(n1, n2)) { // n1 有值 再看两个是否是相同节点\n            unmount(n1);\n            n1 = null;\n        }\n        // 如果前后元素不一致 需要删除老的元素 换成新的元素\n\n\n        if (n1 == n2) return;\n        const { shapeFlag, type } = n2; // createApp(组件)\n\n        switch (type) {\n            case Text:\n                processText(n1, n2, container);\n                break;\n\n            default:\n                if (shapeFlag & ShapeFlags.COMPONENT) {\n                    processComponent(n1, n2, container);\n                } else if (shapeFlag & ShapeFlags.ELEMENT) {\n                    processElement(n1, n2, container,anchor);\n                }\n        }\n    }\n    const render = (vnode, container) => { // 将虚拟节点 转化成真实节点渲染到容器中\n        // 后续还有更新 patch  包含初次渲染 还包含更新\n        patch(null, vnode, container);// 后续更新 prevNode nextNode container\n    }\n    // \n    return {\n        createApp: createAppAPI(render), // 创建一个api createApp\n        render\n    }\n}","/*\n * @Description: \n * @Author: changqing\n * @Date: 2021-12-18 22:01:35\n * @LastEditTime: 2021-12-18 22:01:35\n * @LastEditors: changqing\n * @Usage: \n */\nexport const nodeOps = {\n  insert: (child, parent, anchor = null) => { // 插入有追加的功能\n      parent.insertBefore(child, anchor); // parent.appendChild(child)\n  },\n  remove: child => {\n      const parent = child.parentNode;\n      if (parent) {\n          parent.removeChild(child);\n      }\n  },\n  createElement: tag => document.createElement(tag),\n  createText: text => document.createTextNode(text),\n  setElementText: (el, text) => el.textContent = text,\n  setText: (node, text) => node.nodeValue = text,\n  parentNode: node => node.parentNode,\n  nextSibling: node => node.nextSibling,\n  querySelector: selector => document.querySelector(selector)\n}\n\n\n// runtime-dom 提供 节点操作的api -> 传递给 runtime-core ","/*\n * @Description: \n * @Author: changqing\n * @Date: 2021-12-18 22:02:11\n * @LastEditTime: 2021-12-18 22:03:19\n * @LastEditors: changqing\n * @Usage: \n */\n\n\n// 需要比对属性 diff算法    属性比对前后值\nfunction patchClass(el, value) {\n  if (value == null) {\n      el.removeAttribute('class');\n  } else {\n      el.className = value;\n  }\n}\nfunction patchStyle(el, prev, next) {\n  const style = el.style; // 操作的是样式\n  // 最新的肯定要全部加到元素上\n  for (let key in next) {\n      style[key] = next[key];\n  }\n  // 新的没有 但是老的有这个属性, 将老的移除掉\n  if (prev) {\n      for (let key in prev) {\n          if (next[key] == null) {\n              style[key] = null;\n          }\n      }\n  }\n}\nfunction createInvoker(value) {\n  const invoker = (e) => { // 每次事件触发调用的都是invoker \n      invoker.value(e)\n  }\n  invoker.value = value; // 存储这个变量, 后续想换绑 可以直接更新value值\n  return invoker\n}\nfunction patchEvent(el, key, nextValue) {\n  // vei  vue event invoker  缓存绑定的事件 \n  const invokers = el._vei || (el._vei = {}); // 在元素上绑定一个自定义属性 用来记录绑定的事件\n  let exisitingInvoker = invokers[key]; // 先看一下有没有绑定过这个事件\n  if (exisitingInvoker && nextValue) { // 换绑逻辑\n      exisitingInvoker.value = nextValue\n  } else {\n      const name = key.slice(2).toLowerCase(); // eventName\n      if (nextValue) {\n          const invoker = invokers[key] = createInvoker(nextValue); // 返回一个引用\n          el.addEventListener(name, invoker);  // 正规的时间 onClick =(e)=>{}\n      } else if (exisitingInvoker) {\n          // 如果下一个值没有 需要删除\n          el.removeEventListener(name, exisitingInvoker);\n          invokers[key] = undefined; // 解绑了\n      }\n      // else{\n      //     // 压根没有绑定过 事件就不需要删除了\n      // }\n  }\n}\nfunction patchAttr(el, key, value) {\n  if (value == null) {\n      el.removeAttribute(key)\n  } else {\n      el.setAttribute(key, value)\n  }\n}\nexport const patchProp = (el, key, prevValue, nextValue) => {\n  if (key === 'class') { // 类名 \n      patchClass(el, nextValue); // \n  } else if (key === 'style') { // 样式\n      patchStyle(el, prevValue, nextValue);\n  } else if (/^on[^a-z]/.test(key)) { // onXxx\n      // 如果有事件 addEventListener  如果没事件 应该用removeListener\n      patchEvent(el, key, nextValue);\n      // 绑定一个 换帮了一个  在换绑一个\n  } else {\n      // 其他属性 setAttribute\n      patchAttr(el, key, nextValue);\n  }\n}","/*\n * @Description: \n * @Author: changqing\n * @Date: 2021-12-18 21:19:59\n * @LastEditTime: 2021-12-18 22:07:29\n * @LastEditors: changqing\n * @Usage: \n */\n// 需要涵盖我们的 dom操作的api 属性操作的api  ， 将这些api 传入到 我们的runtime-core中\n// runtime-core 在操作中不需要依赖于平台代码 （平台代码是被传入的）\n// 我们在渲染页面的时候 需要节点操作的一系列方法\n\nimport { createRenderer } from '@vue/runtime-core';\nimport { nodeOps } from './nodeOps';\nimport { patchProp } from './patchProp';\n\nconst renderOptions = Object.assign(nodeOps, { patchProp }); // 包含所需要的所有api\n\n\n// 实现将renderOptions 传入到core中\n// runtime-dom  在这层 对我们浏览器的操作做了一些\nexport const createApp = (component, rootProps = null) => {\n    // 需要创建一个渲染器\n    const { createApp } = createRenderer(renderOptions); // runtime-core中的方法\n    let app = createApp(component, rootProps);\n    let { mount } = app; // 获取core中mount\n    app.mount = function (container) {  // 在重写mount\n        container = nodeOps.querySelector(container);\n        container.innerHTML = '';\n        mount(container); // 处理节点后传入到mount中\n    }\n    return app;\n}\n\nexport const createSSRApp = () =>{ \n\n}\n\nexport * from '@vue/runtime-core'; // 导出这个模块中的所有代码  es6 模块规范\n\n"],"names":[],"mappings":"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"}