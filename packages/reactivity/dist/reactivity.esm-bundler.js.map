{"version":3,"file":"reactivity.esm-bundler.js","sources":["../src/effect.ts","../src/reactive.ts","../src/computed.ts","../src/ref.ts"],"sourcesContent":["/*\n * @Description: \n * @Author: changqing\n * @Date: 2021-12-18 15:34:57\n * @LastEditTime: 2021-12-18 16:09:05\n * @LastEditors: changqing\n * @Usage: \n */\n\n// effect1(()=>{\n//     state.name\n//     effect2(()=>{\n//         state.age;\n//     })\n//     state.address\n// })\n// effectStack = [effect1] activeEffect = effect1\n// effect1 -> name\n// effectStack = [effect1，effect2] activeEffect = effect2\n// effect2 -> age\n// effectStack = [effect1] activeEffect = effect1\n// effect1 -> address\n\n\nlet effectStack = []; // 目的就是为了能保证我们effect执行的时候 可以存储正确的关系\nlet activeEffect;\n\n\nfunction cleanupEffect(effect) {\n  const { deps } = effect;\n  for (let dep of deps) {\n      // set 删除effect 让属性 删除掉对应的effect   name = []\n      dep.delete(effect); // 让属性对应的effect移除掉，这样属性更新的时候 就不会触发这个effect重新执行了\n  }\n}\n\n// 属性变化 触发的是 dep -> effect\n// effect.deps = [] 和属性是没关系的\nexport class ReactiveEffect {\n  active = true; // this.active = true;\n  deps = []; // 让effect 记录他依赖了哪些属性 ， 同时要记录当前属性依赖了哪个effect\n  constructor(public fn, public scheduler?) { // this.fn = fn;\n\n  }\n  run() { // 调用run的时候会让fn执行\n      if (!this.active) { // 稍后如果非激活状态 调用run方法 默认会执行fn函数\n          return this.fn();\n      }\n      if (!effectStack.includes(this)) { // 屏蔽同一个effect会多次执行\n          try {\n              effectStack.push(activeEffect = this);\n              return this.fn(); // 取值  new Proxy 会执行get方法  (依赖收集)\n          } finally {\n              effectStack.pop(); // 删除最后一个\n              activeEffect = effectStack[effectStack.length - 1]\n          }\n      }\n  }\n  stop() { // 让effect 和 dep 取消关联 dep上面存储的effect移除掉即可\n      if (this.active) {\n          cleanupEffect(this)\n          this.active = false;\n      }\n  }\n}\n// obj name :[effect]\n//     age : [effect]\n// {对象：{属性 ： [effect,effect]}  } \nexport function isTracking() {\n  return activeEffect !== undefined\n}\n\nconst targetMap = new WeakMap();\nexport function track(target, key) { // 一个属性对应多个effect， 一个effect中依赖了多个属性 =》 多对多\n  // 是只要取值我就要收集吗？不是\n  if (!isTracking()) { // 如果这个属性 不依赖于effect直接跳出即可\n      return\n  }\n  let depsMap = targetMap.get(target);\n  if (!depsMap) {\n      targetMap.set(target, (depsMap = new Map())); // {对象：map{}}\n  }\n  let dep = depsMap.get(key);\n  if (!dep) {\n      depsMap.set(key, (dep = new Set()));// {对象：map{name:set[]}}\n  }\n  trackEffects(dep);\n}\nexport function trackEffects(dep) {\n  let shouldTrack = !dep.has(activeEffect); // 看一下这个属性有没有存过这个effect\n  if (shouldTrack) {\n      dep.add(activeEffect); // // {对象：map{name:set[effect,effect]}}\n      activeEffect.deps.push(dep); // 稍后用到\n  } // { 对象：{name:set,age:set}\n\n}\nexport function trigger(target, key) {\n  let depsMap = targetMap.get(target);\n  if (!depsMap) return;// 属性修改的属性 根本没有依赖任何的effect\n  let deps = []; // [set ,set ]\n  if (key !== undefined) {\n      deps.push(depsMap.get(key));\n  }\n  let effects = [];\n  for (const dep of deps) {\n      effects.push(...dep)\n  }\n  triggerEffects(effects);\n}\nexport function triggerEffects(dep) {\n  for (const effect of dep) { // 如果当前effect执行 和 要执行的effect是同一个，不要执行了 防止循环\n      if (effect !== activeEffect) {\n          if (effect.scheduler) {\n              return effect.scheduler()\n          }\n          effect.run(); // 执行effect\n      }\n  }\n}\nexport function effect(fn) {\n  const _effect = new ReactiveEffect(fn);\n  _effect.run(); // 会默认让fn执行一次\n  let runner = _effect.run.bind(_effect);\n  runner.effect = _effect; // 给runner添加一个effect实现 就是 effect实例\n  return runner;\n}\n// vue3 的响应式原理  取值时 收集对应的effect， 改值时找到对应的effect执行","/*\n * @Description: \n * @Author: changqing\n * @Date: 2021-12-17 11:07:14\n * @LastEditTime: 2021-12-18 16:16:05\n * @LastEditors: changqing\n * @Usage: \n */\nimport { isObject } from \"@vue/shared\";\nimport { track, trigger } from \"./effect\";\n\nconst enum ReactiveFlags{\n  IS_REACTIVE = '__v_isReactive'\n}\n\nconst mutableHandlers: ProxyHandler<Record<any, any>> = {\n  get(target, key, recevier) { // 代理对象的本身\n      if (key === ReactiveFlags.IS_REACTIVE) {\n          return true;\n      }\n      // 这里取值了， 可以收集他在哪个effect中\n      track(target,key);\n      const res = Reflect.get(target, key, recevier); // target[key]\n      return res;\n  },\n  set(target, key, value, recevier) {\n      let oldValue = (target as any)[key]\n      const res = Reflect.set(target, key, value, recevier); // target[key] = value\n       // 如果改变值了， 可以在这里触发effect更新\n      if(oldValue !== value){ // 值不发生变化 effect不需要重新执行\n        trigger(target,key); // 找属性对应的effect让她重新执行\n      }\n      return res;\n  }\n}\n// map和weakMap的区别\nconst reactiveMap = new WeakMap(); // weakmap 弱引用   key必须是对象，如果key没有被引用可以被自动销毁\n\nfunction createReactiveObject(target: object) { \n  // 先默认认为这个target已经是代理过的属性了\n  if ((target as any)[ReactiveFlags.IS_REACTIVE]) {\n      return target\n  }\n  // reactiveApi 只针对对象才可以 \n  if (!isObject(target)) {\n      return target\n  }\n  const exisitingProxy = reactiveMap.get(target); // 如果缓存中有 直接使用上次代理的结果\n  if (exisitingProxy) {\n      return exisitingProxy\n  }\n  const proxy = new Proxy(target, mutableHandlers); // 当用户获取属性 或者更改属性的时候 我能劫持到\n  reactiveMap.set(target, proxy); // 将原对象和生成的代理对象 做一个映射表\n\n  return proxy; // 返回代理\n}\n\nexport function reactive(target: object) {\n  return createReactiveObject(target)\n}\nexport function toReactive(value){\n  return isObject(value) ? reactive(value) : value\n}\n// readonly shallowReactive shallowReadnly \n// export function readonly(){\n// }\n// export function shallowReactive(){\n// }\n// export function shallowReadnly(){\n// }\n","/*\n * @Description: \n * @Author: changqing\n * @Date: 2021-12-18 16:19:54\n * @LastEditTime: 2021-12-18 16:19:54\n * @LastEditors: changqing\n * @Usage: \n */\nimport { isFunction } from \"@vue/shared\";\nimport { isTracking, ReactiveEffect, trackEffects, triggerEffects } from \"./effect\";\n\n\nclass ComputedRefImpl {\n    public dep; // this.dep = undefined;\n    public _dirty = true; // this._dirty = true;\n    public __v_isRef = true;\n    public effect; // 计算属性是依赖于effect的\n    public _value;\n    constructor(getter, public setter) { // 只有调用computed()才执行一次\n        // 这里将计算属性包成一个effect\n        // 这里 我给计算属性变成了effect ，那么计算属性中的属性会收集这个effect\n        this.effect = new ReactiveEffect(getter,()=>{\n            // 稍后计算属性依赖的值变化 不要重新执行计算属性的effect，而是调用此函数\n            if(!this._dirty){\n                this._dirty = true;\n                triggerEffects(this.dep )\n            }\n        });\n    }\n    get value() { // 取值时会走get方法\n        if (isTracking()) { // 是否是在effect中取值的\n            trackEffects(this.dep || (this.dep = new Set))\n        }\n        if (this._dirty) {\n            // 将结果缓存到this._value 这样就不用每次都run了\n            this._value = this.effect.run();\n            this._dirty = false;\n        }\n        return this._value;\n    }\n    set value(newValue) {\n        this.setter(newValue); // 如果修改计算属性的值 就触发你自己的set方法\n    }\n}\nexport function computed(getterOrOptions) {\n    const onlyGetter = isFunction(getterOrOptions);\n    let getter;\n    let setter;\n    if (onlyGetter) {\n        getter = getterOrOptions;\n        setter = () => { }\n    } else {\n        getter = getterOrOptions.get;\n        setter = getterOrOptions.set;\n    }\n\n    return new ComputedRefImpl(getter, setter)\n}","/*\n * @Description: \n * @Author: changqing\n * @Date: 2021-12-18 16:43:46\n * @LastEditTime: 2021-12-18 16:48:58\n * @LastEditors: changqing\n * @Usage: \n */\nimport { isTracking, trackEffects, triggerEffects } from \"./effect\";\nimport { toReactive } from \"./reactive\";\n\nclass RefImpl{\n    public dep;\n    public __v_isRef;\n    public _value;\n    constructor(public _rawValue){ // 原来的值\n        // _rawValue如果用户传进来的值 是一个对象 我需要将对象转化成响应式\n        this._value = toReactive(_rawValue)\n    }\n\n  \n    // 类的属性访问器 最终会变成deifneProperty\n    get value(){ // 取值的时候进行依赖收集\n        if(isTracking()){\n            trackEffects(this.dep || (this.dep = new Set()));\n        }\n        return this._value;\n    }\n    set value(newValue){ // 设置的时候触发更新\n        if(newValue !== this._rawValue){\n            // 先看一下之前之后是否一样\n            this._rawValue = newValue;\n            this._value =  toReactive(newValue);\n            triggerEffects(this.dep);\n        }\n    }\n}\n\nfunction createRef(value){\n\n    return new RefImpl(value);\n}\n\n\nexport function ref(value){\n    return createRef(value);\n}\n\n// export function shallowRef(value){\n //   return createRef(value,true);\n// }\n\n// reactive readonly "],"names":[],"mappings":"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"}